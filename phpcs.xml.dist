<?xml version="1.0"?>
<ruleset name="WordPress Coding Standards">
	<description>Apply WordPress Coding Standards</description>

	<!-- Set the memory limit to 256M.
		 For most standard PHP configurations, this means the memory limit will temporarily be raised.
		 Ref: https://github.com/squizlabs/PHP_CodeSniffer/wiki/Advanced-Usage#specifying-phpini-settings
	-->
	<ini name="memory_limit" value="256M"/>

	<!-- Whenever possible, cache the scan results and re-use those for unchanged files on the next scan. -->
	<arg name="cache"/>

	<!-- Strip the filepaths down to the relevant bit. -->
	<arg name="basepath" value="./"/>

	<!-- Check up to 20 files simultaneously. -->
	<arg name="parallel" value="20"/>

	<!-- Show sniff codes in all reports. -->
	<arg value="ps"/>

	<!-- Use WordPress "Extra" Coding Standards. -->
	<rule ref="WordPress-Extra">
		<!-- Allow array short syntax. -->
		<exclude name="Generic.Arrays.DisallowShortArraySyntax" />
		<exclude name="Universal.Arrays.DisallowShortArraySyntax"/>
		<!-- Allow short prefixes. -->
		<exclude name="WordPress.NamingConventions.PrefixAllGlobals.ShortPrefixPassed"/>
	</rule>

	<!-- Use WordPress "Docs" Coding Standards. -->
	<rule ref="WordPress-Docs">
		<!-- Disable package tag requirements in file comments -->
		<exclude name="Squiz.Commenting.FileComment.MissingPackageTag"/>
		<exclude name="Squiz.Commenting.FileComment.PackageTagOrder"/>
		<exclude name="Squiz.Commenting.FileComment.IncorrectPackageTag"/>
	</rule>

	<!-- The minimum supported WordPress version. This should match what's listed in style.css. -->
	<rule ref="WordPress.WP.DeprecatedFunctions">
		<properties>
			<property name="minimum_wp_version" value="8.0"/>
		</properties>
	</rule>

	<!-- Allow for theme specific exceptions to the file name rules based on the theme hierarchy. -->
	<rule ref="WordPress.Files.FileName">
		<properties>
			<property name="is_theme" value="true"/>
		</properties>
	</rule>

	<!-- Verify that everything in the global namespace is prefixed with a theme specific prefix.
		 Multiple valid prefixes can be provided as a comma-delimited list. -->
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals">
		<properties>
			<property name="prefixes" type="array">
				<element value="jaws"/>
			</property>
		</properties>
		<exclude name="WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedClassFound" />
		<exclude name="WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedVariableFound" />
		<exclude name="WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedConstantFound" />
	</rule>

	<!-- Verify that the text_domain is set to the desired text-domain.
		 Multiple valid text domains can be provided as a comma-delimited list. -->
	<rule ref="WordPress.WP.I18n">
		<properties>
			<property name="text_domain" type="array">
				<element value="jaws"/>
			</property>
		</properties>
	</rule>

	<!-- Use WordPress PHP Compatibility. -->
	<rule ref="PHPCompatibilityWP"/>

	<!-- WordPress Core currently supports PHP 5.6+. -->
	<config name="testVersion" value="5.6-"/>

	<!-- Only sniff PHP files. -->
	<arg name="extensions" value="php"/>

	<!-- Only sniff the theme. -->
	<file>./</file>

	<!--
	Prevent errors caused by WordPress Coding Standards not supporting PHP 8.0+.
	See https://github.com/WordPress/WordPress-Coding-Standards/issues/2035
	-->
	<ini name="error_reporting" value="E_ALL &#38; ~E_DEPRECATED" />

	<!-- Don't sniff the following directories or file types. -->
	<exclude-pattern>/build/*</exclude-pattern>
	<exclude-pattern>/node_modules/*</exclude-pattern>
	<exclude-pattern>/vendor/*</exclude-pattern>
	<exclude-pattern>/tgmpa/*</exclude-pattern>
</ruleset>
