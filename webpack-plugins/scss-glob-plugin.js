const fs = require('fs');
const path = require('path');
const glob = require('glob');

class ScssGlobPlugin {
	constructor(options = {}) {
		this.options = {
			pattern: 'components/**/*.scss',
			outputFile: 'src/scss/components/_components-auto.scss',
			baseDir: process.cwd(),
			...options,
		};
	}

	apply(compiler) {
		const pluginName = 'ScssGlobPlugin';

		compiler.hooks.beforeCompile.tapAsync(
			pluginName,
			(compilation, callback) => {
				this.generateScssImports();
				callback();
			}
		);

		// Also regenerate on watch mode when files change
		compiler.hooks.watchRun.tapAsync(pluginName, (params, callback) => {
			this.generateScssImports();
			callback();
		});
	}

	generateScssImports() {
		const { pattern, outputFile, baseDir } = this.options;
		const fullPattern = path.join(baseDir, pattern);
		const outputPath = path.join(baseDir, outputFile);

		try {
			// Find all SCSS files matching the pattern
			const scssFiles = glob.sync(fullPattern, {
				ignore: ['**/node_modules/**', '**/build/**', '**/vendor/**'],
			});

			// Filter out partial files (files that start with underscore)
			const filteredFiles = scssFiles.filter((file) => {
				const filename = path.basename(file);
				return !filename.startsWith('_');
			});

			// Generate @use statements
			const imports = filteredFiles
				.map((file) => {
					// Get relative path from the output file to the SCSS file
					const relativePath = path.relative(
						path.dirname(outputPath),
						file
					);
					// Remove .scss extension and convert backslashes to forward slashes
					const importPath = relativePath
						.replace(/\.scss$/, '')
						.replace(/\\/g, '/');
					// Create a namespace from the file path
					const namespace = this.createNamespace(importPath);

					return `@use '${importPath}' as ${namespace};`;
				})
				.join('\n');

			// Add header comment
			const content = `// Auto-generated file - do not edit manually
// This file is generated by webpack-plugins/scss-glob-plugin.js
// It automatically imports all SCSS files matching: ${pattern}

${imports}
`;

			// Ensure output directory exists
			const outputDir = path.dirname(outputPath);
			if (!fs.existsSync(outputDir)) {
				fs.mkdirSync(outputDir, { recursive: true });
			}

			// Write the file only if content has changed
			let shouldWrite = true;
			if (fs.existsSync(outputPath)) {
				const existingContent = fs.readFileSync(outputPath, 'utf8');
				shouldWrite = existingContent !== content;
			}

			if (shouldWrite) {
				fs.writeFileSync(outputPath, content, 'utf8');
				// eslint-disable-next-line no-console
				console.log(`Generated SCSS imports: ${outputPath}`);
			}
		} catch (error) {
			// eslint-disable-next-line no-console
			console.error('Error generating SCSS imports:', error);
		}
	}

	createNamespace(filePath) {
		// Convert file path to a valid SCSS namespace
		// Remove leading dots and slashes, replace special characters
		return filePath
			.replace(/^[./]+/, '')
			.replace(/[^a-zA-Z0-9]/g, '-')
			.replace(/-+/g, '-')
			.replace(/^-|-$/g, '')
			.toLowerCase();
	}
}

module.exports = ScssGlobPlugin;
